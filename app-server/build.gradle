plugins {
    id "java"
    id "jacoco"
    id "io.freefair.lombok"
    id "org.flywaydb.flyway"
    id "org.springframework.boot"
    id "io.spring.dependency-management"
}

group = "com.github.arhor"

java {
    sourceCompatibility = libs.versions.java.get()
    targetCompatibility = libs.versions.java.get()
}

ext {
    jacocoExclusions = [
        "**/config/*",
        "**/mapper/*",
        "**/error/*",
        "**/model/*",
        "**/dto/*",
    ].collect { "com/github/arhor/linden/dragon/tavern/$it" }
}

repositories {
    mavenCentral()
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    implementation {
        exclude module: "spring-boot-starter-tomcat"
        exclude module: "moneta-convert-ecb"
        exclude module: "moneta-convert-imf"
    }
    testImplementation {
        exclude module: "junit-vintage-engine"
    }
}

dependencies {
    annotationProcessor "org.mapstruct:mapstruct-processor:${property("app.version.mapstruct")}"
    annotationProcessor "org.springframework:spring-context-indexer"
    annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"

    compileOnly "org.mapstruct:mapstruct:${property("app.version.mapstruct")}"

    runtimeOnly "org.postgresql:postgresql"

    developmentOnly "org.springframework.boot:spring-boot-devtools"

    implementation project(":app-model")
    implementation "org.apache.commons:commons-lang3:${libs.versions.apacheCommonsLang.get()}"
    implementation "org.apache.commons:commons-collections4:${libs.versions.apacheCommonsCollections.get()}"
    implementation "org.flywaydb:flyway-core"
    implementation "org.javamoney:moneta:${libs.versions.javamoneyMoneta.get()}"

    implementation "org.springframework.boot:spring-boot-starter-actuator"
    implementation "org.springframework.boot:spring-boot-starter-aop"
    implementation "org.springframework.boot:spring-boot-starter-cache"
    implementation "org.springframework.boot:spring-boot-starter-data-jdbc"
    implementation "org.springframework.boot:spring-boot-starter-oauth2-client"
    implementation "org.springframework.boot:spring-boot-starter-security"
    implementation "org.springframework.boot:spring-boot-starter-undertow"
    implementation "org.springframework.boot:spring-boot-starter-validation"
    implementation "org.springframework.boot:spring-boot-starter-web"
    implementation "org.springframework.session:spring-session-core"

    testRuntimeOnly "org.postgresql:postgresql"

    testImplementation "com.tngtech.archunit:archunit-junit5:${libs.versions.archunit.get()}"
    testImplementation "org.springframework.boot:spring-boot-starter-test"
    testImplementation "org.springframework.security:spring-security-test"
    testImplementation "org.testcontainers:junit-jupiter"
    testImplementation "org.testcontainers:postgresql"
}

dependencyManagement {
    imports {
        mavenBom "org.testcontainers:testcontainers-bom:${property("app.version.testcontainers")}"
    }
}

tasks.withType(JavaCompile) {
    options.compilerArgs = [
        "-Xlint:unchecked",
        "-Xlint:deprecation",
        "-Xlint:preview",
        "--enable-preview",
        "-parameters"
    ]
}

task contractTest(type: Test) {
    group = "verification"
    useJUnitPlatform {
        includeTags "contract"
    }
    shouldRunAfter test
}

task integrationTest(type: Test) {
    group = "verification"
    useJUnitPlatform {
        includeTags "integration"
    }
    shouldRunAfter contractTest
}

test {
    useJUnitPlatform {
        excludeTags "contract", "integration"
    }
}

check {
    dependsOn = [
        test,
        contractTest,
        integrationTest,
        jacocoTestReport,
        jacocoTestCoverageVerification,
    ]
}

bootRun {
    jvmArgs += "--enable-preview"
}

jacoco {
    toolVersion = libs.versions.jacoco.get()
}

jacocoTestReport {
    dependsOn test

    classDirectories.setFrom files(classDirectories.files.collect {
        fileTree(
            dir: it,
            exclude: jacocoExclusions
        )
    })
    reports {
        xml.required.set(false)
        csv.required.set(false)
        html.required.set(true)
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.0
            }
        }
    }
    classDirectories.setFrom files(classDirectories.files.collect {
        fileTree(
            dir: it,
            exclude: jacocoExclusions
        )
    })
}

flyway {
    url = env.getRequired("JDBC_DATABASE_URL")
    user = env.getRequired("JDBC_DATABASE_USERNAME")
    password = env.getRequired("JDBC_DATABASE_PASSWORD")

    driver = "org.postgresql.Driver"
    encoding = "UTF-8"
    locations = ["classpath:db/migration"]
    baselineVersion = "0.0"
    baselineOnMigrate = true
}
